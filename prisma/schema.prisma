generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model clubmembers {
  ClubMemberID                 Int                            @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  FirstName                    String?                        @db.VarChar(45)
  LastName                     String?                        @db.VarChar(45)
  DOB                          DateTime?                      @db.Date
  Height                       Int?                           @db.UnsignedInt
  Weight                       Int?                           @db.UnsignedInt
  SIN                          String?                        @unique(map: "sin_UNIQUE") @db.VarChar(11)
  MedicareNumber               String?                        @unique(map: "medicalnumber_UNIQUE") @db.VarChar(10)
  Phone                        String?                        @unique(map: "Phone_UNIQUE") @db.VarChar(12)
  Address                      String?                        @db.VarChar(45)
  City                         String?                        @db.VarChar(45)
  Province                     String?                        @db.VarChar(45)
  Postalcode                   String?                        @db.VarChar(45)
  Status                       clubmembers_Status?            @default(Inactive)
  Gender                       clubmembers_Gender?
  LocationID                   Int?
  locations                    locations?                     @relation(fields: [LocationID], references: [LocationID], onDelete: NoAction, onUpdate: NoAction, map: "fk_location_clubMember")
  payments                     payments[]
  playerslist                  playerslist[]
  primaryfamilyrelationships   primaryfamilyrelationships[]
  secondaryfamilyrelationships secondaryfamilyrelationships[]

  @@index([LocationID], map: "fk_location_clubMember_idx")
}

model familymembers {
  FamilyMemberID             Int                          @id @default(autoincrement())
  FirstName                  String?                      @db.VarChar(45)
  LastName                   String?                      @db.VarChar(45)
  DOB                        DateTime?                    @db.Date
  SIN                        String?                      @unique(map: "SIN") @db.VarChar(45)
  MedicareNumber             String?                      @unique(map: "MedicareNumber") @db.VarChar(45)
  Address                    String?                      @db.VarChar(45)
  City                       String?                      @db.VarChar(45)
  Province                   String?                      @db.VarChar(45)
  Email                      String?                      @unique(map: "Email") @db.VarChar(45)
  Phone                      String?                      @unique(map: "Phone") @db.VarChar(12)
  Postalcode                 String?                      @db.VarChar(45)
  primaryfamilyrelationships primaryfamilyrelationships[]
}

model primaryfamilyrelationships {
  FamilyMemberID Int
  ClubMemberID   Int                                      @db.UnsignedInt
  Relationship   primaryfamilyrelationships_Relationship?
  familymembers  familymembers                            @relation(fields: [FamilyMemberID], references: [FamilyMemberID], map: "PrimaryFamilyRelationships_ibfk_1")
  clubmembers    clubmembers                              @relation(fields: [ClubMemberID], references: [ClubMemberID], map: "fk_ClubMemberID_FamilyRelationships")

  @@id([FamilyMemberID, ClubMemberID])
  @@index([ClubMemberID], map: "fk_ClubMemberID_FamilyRelationships")
}

model locations {
  Name            String?           @db.VarChar(45)
  MaxCapacity     Int?
  Phone           String?           @db.VarChar(12)
  Address         String?           @db.VarChar(45)
  City            String?           @db.VarChar(255)
  Province        String?           @db.VarChar(45)
  PostalCode      String?           @db.VarChar(45)
  WebAddress      String?           @db.VarChar(45)
  Type            locations_Type?
  LocationID      Int               @id @default(autoincrement())
  clubmembers     clubmembers[]
  personnel       personnel[]
  personnelroles  personnelroles[]
  sessions        sessions[]
  teaminformation teaminformation[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model payments {
  ClubMemberID        Int?             @db.UnsignedInt
  PaymentDate         DateTime?        @db.Date
  PaymentID           Int              @id @default(autoincrement())
  Amount              Float?
  Method              payments_Method?
  MembershipStartDate DateTime?        @db.Date
  MembershipEndDate   DateTime?        @db.Date
  InstallmentNumber   Int?
  ExcessDonation      Float?           @default(0)
  clubmembers         clubmembers?     @relation(fields: [ClubMemberID], references: [ClubMemberID], onDelete: Restrict, map: "fk_ClubMemberID")

  @@index([ClubMemberID], map: "fk_ClubMemberID_idx")
}

model personnel {
  PersonnelID    Int                @id @unique(map: "PersonnelID_UNIQUE") @default(autoincrement())
  FirstName      String?            @db.VarChar(45)
  LastName       String?            @db.VarChar(45)
  Mandate        personnel_Mandate?
  DOB            DateTime?          @db.Date
  SIN            String?            @unique(map: "sin_UNIQUE") @db.VarChar(11)
  MedicareNumber String?            @unique(map: "medicalnumber_UNIQUE") @db.VarChar(10)
  Phone          String?            @db.VarChar(12)
  Address        String?            @db.VarChar(45)
  City           String?            @db.VarChar(45)
  Province       String?            @db.VarChar(45)
  PostalCode     String?            @db.VarChar(45)
  Email          String?            @unique(map: "Email_UNIQUE") @db.VarChar(45)
  LocationID     Int?
  locations      locations?         @relation(fields: [LocationID], references: [LocationID], onDelete: Restrict, map: "fk_personnel_location")
  personnelroles personnelroles?

  @@index([LocationID], map: "fk_personnel_location")
}

model personnelroles {
  PersonnelID     Int                  @unique(map: "PersonnelID_UNIQUE")
  LocationID      Int
  Role            personnelroles_Role?
  StartDate       DateTime             @db.Date
  EndDate         DateTime?            @db.Date
  personnel       personnel            @relation(fields: [PersonnelID], references: [PersonnelID], onDelete: NoAction, onUpdate: NoAction, map: "PersonnelRoles_ibfk_1")
  locations       locations            @relation(fields: [LocationID], references: [LocationID], onDelete: NoAction, onUpdate: NoAction, map: "PersonnelRoles_ibfk_2")
  teaminformation teaminformation[]

  @@id([PersonnelID, LocationID, StartDate])
  @@index([LocationID], map: "LocationID")
}

model playerslist {
  ClubMemberID    Int               @db.UnsignedInt
  TeamID          Int?
  Role            playerslist_Role?
  SessionID       Int
  sessions        sessions          @relation(fields: [SessionID], references: [SessionID], onDelete: NoAction, onUpdate: NoAction, map: "PlayersList_ibfk_1")
  teaminformation teaminformation?  @relation(fields: [TeamID], references: [TeamID], onDelete: NoAction, onUpdate: NoAction, map: "PlayersList_ibfk_2")
  clubmembers     clubmembers       @relation(fields: [ClubMemberID], references: [ClubMemberID], onDelete: NoAction, onUpdate: NoAction, map: "PlayersList_ibfk_3")

  @@id([ClubMemberID, SessionID])
  @@index([SessionID], map: "SessionID")
  @@index([TeamID], map: "TeamID")
}

model secondaryfamilymembers {
  SecondaryID                  Int                            @id @default(autoincrement()) @db.UnsignedInt
  FirstName                    String?                        @db.VarChar(50)
  LastName                     String?                        @db.VarChar(50)
  Phone                        String?                        @db.VarChar(20)
  secondaryfamilyrelationships secondaryfamilyrelationships[]
}

model secondaryfamilyrelationships {
  ClubMemberID           Int                                        @db.UnsignedInt
  SecondaryID            Int                                        @db.UnsignedInt
  Relationship           secondaryfamilyrelationships_Relationship?
  clubmembers            clubmembers                                @relation(fields: [ClubMemberID], references: [ClubMemberID], onDelete: NoAction, onUpdate: NoAction, map: "fk_clubMember_secondaryRelationship")
  secondaryfamilymembers secondaryfamilymembers                     @relation(fields: [SecondaryID], references: [SecondaryID], onDelete: NoAction, onUpdate: NoAction, map: "fk_secondaryFamily_secondaryRelationship")

  @@id([ClubMemberID, SecondaryID])
  @@index([SecondaryID], map: "fk_secondaryFamily_secondaryRelationship_idx")
}

model sessions {
  SessionID                                         Int                   @id @default(autoincrement())
  LocationID                                        Int?
  DateTime                                          DateTime?             @db.DateTime(0)
  Team1ID                                           Int?
  Team2ID                                           Int?
  ScoreTeam1                                        Int?
  ScoreTeam2                                        Int?
  GenderMatch                                       sessions_GenderMatch?
  Type                                              sessions_Type?
  playerslist                                       playerslist[]
  locations                                         locations?            @relation(fields: [LocationID], references: [LocationID], onDelete: NoAction, onUpdate: NoAction, map: "fk_location_session")
  teaminformation_sessions_Team1IDToteaminformation teaminformation?      @relation("sessions_Team1IDToteaminformation", fields: [Team1ID], references: [TeamID], onDelete: NoAction, onUpdate: NoAction, map: "fk_team1_session")
  teaminformation_sessions_Team2IDToteaminformation teaminformation?      @relation("sessions_Team2IDToteaminformation", fields: [Team2ID], references: [TeamID], onDelete: NoAction, onUpdate: NoAction, map: "fk_team2_session")

  @@index([LocationID], map: "fk_location_session")
  @@index([Team1ID], map: "fk_team1_session_idx")
  @@index([Team2ID], map: "fk_team2_session_idx")
}

model teaminformation {
  TeamID                                     Int                     @id @default(autoincrement())
  TeamName                                   String?                 @db.VarChar(45)
  Gender                                     teaminformation_Gender?
  CaptainName                                String?                 @db.VarChar(45)
  LocationID                                 Int?
  CoachID                                    Int?
  playerslist                                playerslist[]
  sessions_sessions_Team1IDToteaminformation sessions[]              @relation("sessions_Team1IDToteaminformation")
  sessions_sessions_Team2IDToteaminformation sessions[]              @relation("sessions_Team2IDToteaminformation")
  personnelroles                             personnelroles?         @relation(fields: [CoachID], references: [PersonnelID], onDelete: NoAction, onUpdate: NoAction, map: "fk_coachID_teamInfo")
  locations                                  locations?              @relation(fields: [LocationID], references: [LocationID], onDelete: NoAction, onUpdate: NoAction, map: "fk_location_teamInfo")

  @@index([CoachID], map: "fk_coachID_teamInfo")
  @@index([LocationID], map: "fk_location_teamInfo")
}

model emaillog {
  LogID          Int       @id @default(autoincrement())
  EmailDate      DateTime? @default(now()) @db.DateTime(0)
  SenderEmail    String?   @db.VarChar(255)
  RecipientEmail String?   @db.VarChar(255)
  CCList         String?   @db.Text
  EmailSubject   String?   @db.VarChar(255)
  BodyPreview    String?   @db.VarChar(100)
}























// ------------------------------------------------------------------------------------------

enum personnelroles_Role {
  Administrator
  Captain
  Coach
  Assistant_Coach @map("Assistant Coach")
  General_Manager @map("General Manager")
  Deputy_Manager  @map("Deputy Manager")
  Treasurer
  Secretary
  Other
}

enum playerslist_Role {
  Outside_Hitter       @map("Outside Hitter")
  Opposite
  Setter
  Middle_Blocker       @map("Middle Blocker")
  Libero
  Defensive_Specialist @map("Defensive Specialist")
  Serving_Specialist   @map("Serving Specialist")
}

enum primaryfamilyrelationships_Relationship {
  Father
  Mother
  Grandfather
  Grandmother
  Uncle
  Ant
  Tutor
  Partner
  Friend
  Other
}

enum secondaryfamilyrelationships_Relationship {
  Father
  Mother
  Grandfather
  Grandmother
  Uncle
  Ant
  Tutor
  Partner
  Friend
  Other
}

enum teaminformation_Gender {
  Male
  Female
}

enum personnel_Mandate {
  Volunteer
  Salaried
}

enum payments_Method {
  Credit
  Debit
  Cash
}

enum sessions_GenderMatch {
  Male
  Female
}

enum locations_Type {
  Head
  Branch
}

enum sessions_Type {
  Game
  Training
}

enum clubmembers_Status {
  Active
  Inactive
}

enum clubmembers_Gender {
  Male
  Female
}
